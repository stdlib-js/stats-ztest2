{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isProbability = require( '@stdlib/assert-is-probability' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( !isProbability( opts.alpha ) ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'difference', opts.difference ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isPositiveNumber = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar quantileFactory = require( '@stdlib/stats-base-dists-normal-quantile' ).factory;\nvar cdfFactory = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar mean = require( '@stdlib/stats-base-mean' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample z-test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {PositiveNumber} sigmax - known standard deviation of first group\n* @param {PositiveNumber} sigmay - known standard deviation of second group\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} sigmax argument has to be a positive number\n* @throws {TypeError} sigmay argument has to be a positive number\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} `alternative` option  must be either `two-sided`, `less`, or `greater`\n* @returns {Object} test result object\n*/\nfunction ztest2( x, y, sigmax, sigmay, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t}\n\tif ( !isPositiveNumber( sigmax ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a positive number. Value: `%s`.', sigmax ) );\n\t}\n\tif ( !isPositiveNumber( sigmay ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a positive number. Value: `%s`.', sigmay ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( (xvar/nx) + (yvar/ny) );\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normCDF( stat );\n\t\tcint = [ stat - normQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normCDF( stat );\n\t\tcint = [ NINF, stat + normQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Two-sample z-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample z-Test.\n*\n* @module @stdlib/stats-ztest2\n*\n* @example\n* var ztest2 = require( '@stdlib/stats-ztest2' );\n*\n* var x = [ 2.66, 1.5, 3.25, 0.993, 2.31, 2.41, 1.76, 2.57, 2.62, 1.23 ]; // Drawn from N(2,1)\n* var y = [ 4.88, 2.93, 2.96, 4.5, -0.0603, 4.62, 3.35, 2.98 ]; // Drawn from N(3,2)\n*\n* var out = ztest2( x, y, 1.0, 2.0 );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar ztest2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isProbability", "isNumber", "isObject", "isString", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isNumberArray", "isTypedArrayLike", "isPositiveNumber", "setReadOnly", "quantileFactory", "cdfFactory", "format", "sqrt", "abs", "mean", "NINF", "PINF", "validate", "print", "normQuantile", "normCDF", "ztest2", "x", "y", "sigmax", "sigmay", "options", "stderr", "alpha", "xmean", "ymean", "cint", "diff", "opts", "pval", "xvar", "yvar", "stat", "alt", "err", "out", "nx", "ny", "ztest2"]
}
