{"version":3,"file":"index.mjs","sources":["../lib/print.js","../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport roundn from '@stdlib/math-base-special-roundn' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0fu3X', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '0fu3b', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '0fu30', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array' ;\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like' ;\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert-is-positive-number' ;\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\nimport { factory as quantileFactory } from '@stdlib/stats-base-dists-normal-quantile' ;\nimport { factory as cdfFactory } from '@stdlib/stats-base-dists-normal-cdf' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport mean from '@stdlib/stats-base-mean' ;\nimport NINF from '@stdlib/constants-float64-ninf' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport validate from './validate.js' ;\nimport print from './print.js' ; // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample z-test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {PositiveNumber} sigmax - known standard deviation of first group\n* @param {PositiveNumber} sigmay - known standard deviation of second group\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} sigmax argument has to be a positive number\n* @throws {TypeError} sigmay argument has to be a positive number\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} `alternative` option  must be either `two-sided`, `less`, or `greater`\n* @returns {Object} test result object\n*/\nfunction ztest2( x, y, sigmax, sigmay, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( '0fu8j', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( '0fuAa', y ) );\n\t}\n\tif ( !isPositiveNumber( sigmax ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a positive number. Value: `%s`.', sigmax ) );\n\t}\n\tif ( !isPositiveNumber( sigmay ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a positive number. Value: `%s`.', sigmay ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( (xvar/nx) + (yvar/ny) );\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normCDF( stat );\n\t\tcint = [ stat - normQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normCDF( stat );\n\t\tcint = [ NINF, stat + normQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( '0fu3t', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Two-sample z-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isProbability } from '@stdlib/assert-is-probability' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport isnan from '@stdlib/assert-is-nan' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0fu2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0fu8h', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( !isProbability( opts.alpha ) ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( '0fu2i', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( '0fu8h', 'difference', opts.difference ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["print","opts","decision","dgts","str","arguments","length","isObject","TypeError","format","hasOwnProp","isPositiveInteger","digits","isBoolean","this","method","alternative","nullValue","roundn","pValue","statistic","alpha","ci","rejected","normQuantile","quantileFactory","normCDF","cdfFactory","ztest2","x","y","sigmax","sigmay","options","stderr","xmean","ymean","cint","diff","pval","stat","alt","err","out","nx","ny","isTypedArrayLike","isNumberArray","isPositiveNumber","isNumber","isnan","isProbability","RangeError","isString","difference","validate","sqrt","mean","abs","PINF","NINF","Error","join","setReadOnly"],"mappings":"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"}