{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/print.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isProbability = require( '@stdlib/assert-is-probability' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( !isProbability( opts.alpha ) ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number in the range 0 to 1. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'difference', opts.difference ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isPositiveNumber = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar quantileFactory = require( '@stdlib/stats-base-dists-normal-quantile' ).factory;\nvar cdfFactory = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar mean = require( '@stdlib/stats-base-mean' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample z-test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {PositiveNumber} sigmax - known standard deviation of first group\n* @param {PositiveNumber} sigmay - known standard deviation of second group\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} sigmax argument has to be a positive number\n* @throws {TypeError} sigmay argument has to be a positive number\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {Error} `alternative` option  must be either `two-sided`, `less`, or `greater`\n* @returns {Object} test result object\n*/\nfunction ztest2( x, y, sigmax, sigmay, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t}\n\tif ( !isPositiveNumber( sigmax ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument `sigmax` must be a positive number. Value: `%s`.', sigmax ) );\n\t}\n\tif ( !isPositiveNumber( sigmay ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument `sigmay` must be a positive number. Value: `%s`.', sigmay ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( (xvar/nx) + (yvar/ny) );\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normCDF( stat );\n\t\tcint = [ stat - normQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normCDF( stat );\n\t\tcint = [ NINF, stat + normQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Two-sample z-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample z-Test.\n*\n* @module @stdlib/stats-ztest2\n*\n* @example\n* var ztest2 = require( '@stdlib/stats-ztest2' );\n*\n* var x = [ 2.66, 1.5, 3.25, 0.993, 2.31, 2.41, 1.76, 2.57, 2.62, 1.23 ]; // Drawn from N(2,1)\n* var y = [ 4.88, 2.93, 2.96, 4.5, -0.0603, 4.62, 3.35, 2.98 ]; // Drawn from N(3,2)\n*\n* var out = ztest2( x, y, 1.0, 2.0 );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar ztest2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n"],"names":["isProbability","require$$0","isPrimitive","isNumber","require$$1","isObject","require$$2","isString","require$$3","isnan","require$$4","hasOwnProp","require$$5","format","require$$6","validate_1","opts","options","TypeError","alpha","RangeError","alternative","difference","isPositiveInteger","isBoolean","roundn","print_1","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","ci","rejected","isNumberArray","primitives","isTypedArrayLike","isPositiveNumber","setReadOnly","quantileFactory","factory","cdfFactory","sqrt","require$$7","abs","require$$8","mean","require$$9","NINF","require$$10","PINF","require$$11","validate","require$$12","print","require$$13","normQuantile","normCDF","lib","x","y","sigmax","sigmay","stderr","xmean","ymean","cint","diff","pval","stat","alt","err","out","nx","ny","Error"],"mappings":"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"}